// <auto-generated />
using System;
using Airborn.web.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace airborn.web.Migrations
{
    [DbContext(typeof(AirbornDbContext))]
    partial class AirbornDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Airborn.web.Models.Airport", b =>
                {
                    b.Property<int>("Airport_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Airport_Id"));

                    b.Property<int?>("FieldElevation")
                        .HasColumnType("integer")
                        .HasColumnName("Elevation_Ft");

                    b.Property<string>("Ident")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude_Deg")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude_Deg")
                        .HasColumnType("double precision");

                    b.Property<double?>("MagneticVariation")
                        .HasColumnType("double precision")
                        .HasColumnName("Magnetic_Variation");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Airport_Id")
                        .HasName("Airport_Id");

                    b.ToTable("airports");
                });

            modelBuilder.Entity("Airborn.web.Models.Runway", b =>
                {
                    b.Property<int>("Runway_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Runway_Id"));

                    b.Property<int>("Airport_Id")
                        .HasColumnType("integer")
                        .HasColumnName("fk_Airport_Id");

                    b.Property<string>("Airport_Ident")
                        .HasColumnType("text");

                    b.Property<int?>("DisplacedThresholdFt")
                        .HasColumnType("integer")
                        .HasColumnName("Displaced_Threshold_Ft");

                    b.Property<int?>("ElevationFt")
                        .HasColumnType("integer")
                        .HasColumnName("Elevation_Ft");

                    b.Property<double?>("HeadingDegreesTrue")
                        .HasColumnType("double precision")
                        .HasColumnName("heading_degT");

                    b.Property<int?>("RunwayLength")
                        .HasColumnType("integer")
                        .HasColumnName("Length_Ft");

                    b.Property<int?>("RunwayWidth")
                        .HasColumnType("integer")
                        .HasColumnName("Width_Ft");

                    b.Property<string>("Runway_Name")
                        .HasColumnType("text");

                    b.Property<string>("SurfaceText")
                        .HasColumnType("text")
                        .HasColumnName("Surface");

                    b.HasKey("Runway_Id")
                        .HasName("Runway_Id");

                    b.HasIndex("Airport_Id");

                    b.ToTable("Runways");
                });

            modelBuilder.Entity("Airborn.web.Models.Runway", b =>
                {
                    b.HasOne("Airborn.web.Models.Airport", "Airport")
                        .WithMany("Runways")
                        .HasForeignKey("Airport_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("Airborn.web.Models.Airport", b =>
                {
                    b.Navigation("Runways");
                });
#pragma warning restore 612, 618
        }
    }
}
