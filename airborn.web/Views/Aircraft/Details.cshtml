@model Airborn.web.Models.AircraftPageModel


@{
    ViewData["Title"] = "Airborn.co | " + Model.Aircraft.AircraftTypeString;
}

<br />

<div class="hero-banner">
    <h2>@Model.Aircraft.AircraftTypeString takeoff and landing data.<br />
        <a <div class="content">asp-controller="Home" asp-action="Calculate">Plan your flight.</a>
    </h2>
</div>

@{
    var lowerWeightTakeoffData = Model.PerformanceDataList.Where(x => x.AircraftWeight ==
    Model.PerformanceDataList.AircraftLowerWeight);
    var higherWeightTakeoffData = Model.PerformanceDataList.Where(x => x.AircraftWeight ==
    Model.PerformanceDataList.AircraftHigherWeight);

    var pressureAltitudes = Model.PerformanceDataList.TakeoffPerformanceData.Select(x =>
    x.PressureAltitude.TotalFeet).Distinct();
    var temperatures = Model.PerformanceDataList.TakeoffPerformanceData.Select(x => x.Temperature).Distinct();
}

<h1>Takeoff</h1>

<h3>@Model.Aircraft.LowestPossibleWeight lbs</h3>

<table>
    <thead>
        <tr class="bg-primary text-white">
            <th rowspan="2">Pressure Altitude</th>
            @foreach (var data in temperatures)
            {
                <th colspan="2">@data Â°C</th>
            }
        </tr>
        <tr class="bg-info text-white">
            @foreach (var _ in temperatures)
            {
                <th>Ground Roll</th>
                <th>Clear 50' Obstacle</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var pressureAltitude in pressureAltitudes)
        {
            <tr>
                <td class="bg-warning text-white">@pressureAltitude ft</td>
                @foreach (var temperature in temperatures)
                {
                    var groundRollData = Model.PerformanceDataList.TakeoffPerformanceData.FirstOrDefault(d =>
                    d.PressureAltitude.TotalFeet == pressureAltitude
                    &&
                    d.Temperature == temperature
                    &&
                    d.AircraftWeight == Model.PerformanceDataList.AircraftLowerWeight
                    );
                    var obstacleData = Model.PerformanceDataList.TakeoffPerformanceData.FirstOrDefault(d =>
                    d.PressureAltitude.TotalFeet == pressureAltitude
                    &&
                    d.Temperature == temperature
                    &&
                    d.AircraftWeight == Model.PerformanceDataList.AircraftLowerWeight
                    );

                    <td>@((groundRollData != null && groundRollData.DistanceGroundRoll.Value.TotalFeet > 0) ?
                            groundRollData.DistanceGroundRoll
                            : "-")</td>
                    <td>@((obstacleData != null && obstacleData.DistanceToClear50Ft.Value.TotalFeet > 0) ?
                            obstacleData.DistanceToClear50Ft : "-")</td>
                }
            </tr>
        }
    </tbody>
</table>

<br />

<h3>@Model.Aircraft.HighestPossibleWeight lbs</h3>

<table>
    <thead>
        <tr class="bg-primary text-white">
            <th rowspan="2">Pressure Altitude</th>
            @foreach (var data in temperatures)
            {
                <th colspan="2">@data</th>
            }
        </tr>
        <tr class="bg-info text-white">
            @foreach (var _ in temperatures)
            {
                <th>Ground Roll</th>
                <th>Clear 50' Obstacle</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var pressureAltitude in pressureAltitudes)
        {
            <tr>
                <td class="bg-warning text-white">@pressureAltitude</td>
                @foreach (var temperature in temperatures)
                {
                    var groundRollData = Model.PerformanceDataList.TakeoffPerformanceData.FirstOrDefault(d =>
                    d.PressureAltitude.TotalFeet == pressureAltitude
                    &&
                    d.Temperature == temperature
                    &&
                    d.AircraftWeight == Model.PerformanceDataList.AircraftHigherWeight
                    );
                    var obstacleData = Model.PerformanceDataList.TakeoffPerformanceData.FirstOrDefault(d =>
                    d.PressureAltitude.TotalFeet == pressureAltitude
                    &&
                    d.Temperature == temperature
                    &&
                    d.AircraftWeight == Model.PerformanceDataList.AircraftHigherWeight
                    );

                    <td>@((groundRollData != null && groundRollData.DistanceGroundRoll.Value.TotalFeet > 0) ?
                            groundRollData.DistanceGroundRoll
                            : "-")</td>
                    <td>@((obstacleData != null && obstacleData.DistanceToClear50Ft.Value.TotalFeet > 0) ?
                            obstacleData.DistanceToClear50Ft : "-")</td>
                }
            </tr>
        }
    </tbody>
</table>

<br />


@{
    var lowerWeightLandingData = Model.PerformanceDataList.Where(x => x.AircraftWeight ==
    Model.PerformanceDataList.AircraftLowerWeight);
    var higherWeightLandingData = Model.PerformanceDataList.Where(x => x.AircraftWeight ==
    Model.PerformanceDataList.AircraftHigherWeight);

    var landingPressureAltitudes = Model.PerformanceDataList.Select(x => x.PressureAltitude.TotalFeet).Distinct();
    var landingTemperatures = Model.PerformanceDataList.Select(x => x.Temperature).Distinct();
}

<h1>Landing</h1>

<h3>@Model.Aircraft.LowestPossibleWeight lbs</h3>

<table>
    <thead>
        <tr class="bg-primary text-white">
            <th rowspan="2">Pressure Altitude</th>
            @foreach (var data in landingTemperatures)
            {
                <th colspan="2">@data</th>
            }
        </tr>
        <tr class="bg-info text-white">
            @foreach (var _ in landingTemperatures)
            {
                <th>Ground Roll</th>
                <th>Clear 50' Obstacle</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var pressureAltitude in landingPressureAltitudes)
        {
            <tr>
                <td class="bg-warning text-white">@pressureAltitude</td>
                @foreach (var temperature in landingTemperatures)
                {
                    var groundRollData = Model.PerformanceDataList.LandingPerformanceData.FirstOrDefault(d =>
                    d.PressureAltitude.TotalFeet == pressureAltitude
                    &&
                    d.Temperature == temperature
                    &&
                    d.AircraftWeight == Model.PerformanceDataList.AircraftLowerWeight
                    );
                    var obstacleData = Model.PerformanceDataList.LandingPerformanceData.FirstOrDefault(d =>
                    d.PressureAltitude.TotalFeet == pressureAltitude
                    &&
                    d.Temperature == temperature
                    &&
                    d.AircraftWeight == Model.PerformanceDataList.AircraftLowerWeight
                    );

                    <td>@((groundRollData != null && groundRollData.DistanceGroundRoll.Value.TotalFeet > 0) ?
                            groundRollData.DistanceGroundRoll
                            : "-")</td>
                    <td>@((obstacleData != null && obstacleData.DistanceToClear50Ft.Value.TotalFeet > 0) ?
                            obstacleData.DistanceToClear50Ft : "-")</td>
                }
            </tr>
        }
    </tbody>
</table>

<h3>@Model.Aircraft.HighestPossibleWeight lbs</h3>

<table>
    <thead>
        <tr class="bg-primary text-white">
            <th rowspan="2">Pressure Altitude</th>
            @foreach (var data in landingTemperatures)
            {
                <th colspan="2">@data</th>
            }
        </tr>
        <tr class="bg-info text-white">
            @foreach (var _ in landingTemperatures)
            {
                <th>Ground Roll</th>
                <th>Clear 50' Obstacle</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var pressureAltitude in landingPressureAltitudes)
        {
            <tr>
                <td class="bg-warning text-white">@pressureAltitude</td>
                @foreach (var temperature in landingTemperatures)
                {
                    var groundRollData = Model.PerformanceDataList.LandingPerformanceData.FirstOrDefault(d =>
                    d.PressureAltitude.TotalFeet == pressureAltitude
                    &&
                    d.Temperature == temperature
                    &&
                    d.AircraftWeight == Model.PerformanceDataList.AircraftHigherWeight
                    );
                    var obstacleData = Model.PerformanceDataList.LandingPerformanceData.FirstOrDefault(d =>
                    d.PressureAltitude.TotalFeet == pressureAltitude
                    &&
                    d.Temperature == temperature
                    &&
                    d.AircraftWeight == Model.PerformanceDataList.AircraftHigherWeight
                    );

                    <td>@((groundRollData != null && groundRollData.DistanceGroundRoll.Value.TotalFeet > 0) ?
                            groundRollData.DistanceGroundRoll
                            : "-")</td>
                    <td>@((obstacleData != null && obstacleData.DistanceToClear50Ft.Value.TotalFeet > 0) ?
                            obstacleData.DistanceToClear50Ft : "-")</td>
                }
            </tr>
        }
    </tbody>
</table>