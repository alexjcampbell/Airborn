@model Airborn.web.Models.Airport

@{
    ViewData["Title"] = Model.Ident + " - " + Model.Name + " | Airborn.co";
}

<br />

<div class="row align-items-md-stretch">
    <div class="col-md-12">
        <div class="p-4 bg-light border rounded-3">
            <h2>
                <b><i>@Html.DisplayFor(model => model.Ident): @Html.DisplayFor(model => model.Name)</i></b>.
        </div>
    </div>
</div>

<div>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Ident)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Ident)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Location)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Location),
            @Html.DisplayFor(model => model.Country_Formatted)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FieldElevation)
        </dt>
        <dd class="col-sm-10">
            @if (@Model.FieldElevation.HasValue)
            {
                @:@Html.DisplayFor(model => model.FieldElevation_Formatted)
            }
            else
            {
                @:N/A
            }
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Type_Friendly)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Type_Friendly)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.MagneticVariation)
        </dt>
        <dd class="col-sm-10">
            @{
                string FormatMagneticVariation(double? variation)
                {
                    if (!variation.HasValue)
                    {
                        return "N/A";
                    }

                    var direction = variation < 0 ? "W" : "E";
                    return $"{Math.Abs((decimal)variation)}째 {direction}";
                }
            }

            @Html.Raw(FormatMagneticVariation(Model.MagneticVariation))
        </dd>
        <dt class="col-sm-2">
            Coordinates
        </dt>
        <dd class="col-sm-10">
            @{
                string FormatCoordinate(double? degree, bool isLongitude)
                {
                    if (!degree.HasValue)
                    {
                        return "N/A";
                    }

                    var direction = degree < 0
                        ? (isLongitude ? "W" : "S")
                        : (isLongitude ? "E" : "N");

                    return $"{Math.Abs((decimal)degree)}째 {direction}";
                }
            }

            @Html.Raw(FormatCoordinate(Model.Latitude_Deg, false)) @Html.Raw(FormatCoordinate(Model.Longitude_Deg, true))

        </dd>  

        @if (!string.IsNullOrEmpty(Model.HomeLink))
        {
                <dd class="col-sm-2">
                    <b>Aiport Website</b>
                </dd>
                <dt class="col-sm-10">
                    <a href="@Html.Raw(Model.HomeLink)" target="_blank">Link</a>
                </dt>
        }
        @if (!string.IsNullOrEmpty(Model.WikipediaLink))
        {

                <dd class="col-sm-2">
                    <b>Wikipedia Page</b>
                </dd>
                <dt class="col-sm-10">
                    <a href="@Html.Raw(Model.WikipediaLink)" target="_blank">Link</a>
                </dt>
        }                   
    </dl>
</div>
@*
<div>
@Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ }) |
<a asp-action="Index">Back to List</a>
</div>
*@


<table class="table">
    <thead>
        <tr>
            <th>
                Runway Name
            </th>
            <th>
                Runway Length
            </th>
            <th>
                Displaced Threshold (ft)
            </th>
            <th>
                Runway Heading (째T)
            </th>
            <th>
                Runway Heading (째M)
            </th>
            <th>
                Slope
            </th>
            <th>
                Surface
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.UsableRunways)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Runway_Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RunwayLengthFriendly)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DisplacedThreshold_Formatted)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Runway_HeadingTrue_Formatted)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Runway_HeadingMagnetic_Formatted)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Slope_Formatted)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Surface)
                </td>
            </tr>
        }
    </tbody>
</table>