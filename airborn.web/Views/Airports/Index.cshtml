@model Airborn.web.Models.PaginatedList<Airborn.web.Models.Airport>


@{
    ViewData["Title"] = "All airports | Airborn.co";
}

<br />

<div class="row align-items-md-stretch">
    <div class="col-md-12">
        <div class="p-4 bg-light border rounded-3">
            <h2>Welcome to the <b><i>Airborn.co</i></b> Airports and Runways Database</h2>

            <p class="fs-5">This database contains every airport on earth, as well as information about their runways.
                We use this
                information to <a asp-controller="Home" asp-action="Calculate">calculate takeoff
                    and landing distances.</a></p>
            <p class="fs-5">This database is not an official source: please refer to your country's AIP for actual
                flight
                planning.</a></p>
        </div>
    </div>
</div>

@*
<p>
<a asp-action="Create">Create New</a>
</p>
*@

<br />

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by airport code: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["IdentSortParm"]">Airport Code</a>
            </th>
            <th>
                @Html.DisplayNameFor(m => m[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(m => m[0].Location)
            </th>
            <th>
                @Html.DisplayNameFor(m => m[0].FieldElevationAsDistance)
            </th>
            <th>
                @Html.DisplayNameFor(m => m[0].Type_Friendly)
            </th>
            <th>
                @Html.DisplayNameFor(m => m[0].MagneticVariation)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Ident)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Location),
                    @Html.DisplayFor(modelItem => item.Country_Formatted)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FieldElevationAsDistance.TotalFeet) ft
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type_Friendly)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.MagneticVariation)
                </td>
                <td>
                    @*
                @Html.ActionLink("Edit", "Edit", new { id=item.Id }) |
                *@
                    @Html.ActionLink("Details", "Details", "Airports", new { ident = item.Ident }, null)
                    @*
                @Html.ActionLink("Delete", "Delete", new { id=item.Id })
                *@
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)" class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)" class="btn btn-default @nextDisabled">
    Next
</a>